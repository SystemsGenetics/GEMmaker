/*
 * -------------------------------------------------
 *  GEMmaker Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */


 // Function to ensure that resource requirements don't go beyond
 // a maximum limit
 def check_max(obj, type) {
   if (type == 'memory') {
     try {
       if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
         return params.max_memory as nextflow.util.MemoryUnit
       else
         return obj
     } catch (all) {
       println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
       return obj
     }
   } else if (type == 'time') {
     try {
       if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
         return params.max_time as nextflow.util.Duration
       else
         return obj
     } catch (all) {
       println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
       return obj
     }
   } else if (type == 'cpus') {
     try {
       return Math.min( obj, params.max_cpus as int )
     } catch (all) {
       println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
       return obj
     }
   }
 }

process {

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 2.GB * task.attempt, 'memory' ) }
  time = { check_max( 24.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 1
  maxErrors = '-1'

  withLabel:retrieve_sra_metadata {
    memory = "6 GB"
  }
  withLabel:local {
    executor = "local"
  }
  withLabel:fastqc {
    time = "24h"
  }
  withLabel:hisat2 {
    time = "48h"
  }
  withLabel:kallisto {
    time = "24h"
    memory = "6 GB"
  }
  withLabel:salmon {
    time = "24h"
  }
  withLabel:samtools {
    time = "48h"
  }
  withLabel:sratoolkit {
    time = "48h"
  }
  withLabel:stringtie {
    time = "48h"
  }
  withLabel:trimmomatic {
    time = "72h"
  }

  // Process-specific resource requirements
  // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
  withLabel:process_low {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withLabel:process_medium {
    cpus = { check_max( 6 * task.attempt, 'cpus' ) }
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel:process_high {
    cpus = { check_max( 12 * task.attempt, 'cpus' ) }
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }
  withLabel:process_long {
    time = { check_max( 20.h * task.attempt, 'time' ) }
  }
  withName:get_software_versions {
    cache = false
  }

}
